        #######===========#######
        ###==== Catatan 1 ====###
        # init, config, status, help
        #######===========#######

git is to control project update
git can be used in terminal, make cd to folder project, and make "git init"

> git init                  = to make git local repository
> git config --global       = make global account
  to make git use the same account with github, insert same username and
  useremail in github
  > git config --global user.name "user_name"
  > git config --global user.email "user_email"
> git status                = check for status
  or
  > git status --short	    = check short status
> git git_command -help	    = check help
  or
  git git_command --help    = open help document

> q   = quit long list in cmd


        #######===========#######
        ###==== Catatan 2 ====###
        # diff, log, stage(add), commit
        #######===========#######

> git diff                  = check for modification
> git add                   = staged for new file to commit
  or use this
  > git add file_name
    file_name file_name
  > git add -A		    = staged all file
  > git add .		    = staged all file
> git log                   = check for user who make modified
  > git log --author="user_
  name"
  > git log file_name
> git commit -m "message"   = to make commit for file after being added
  > git commit -a -m "mess" = commit without stage
> (git_command) --oneline   = make 'log' in oneline



        #######===========#######
        ###==== Catatan 3 ====###
        # checkout, reset, rm
        #######===========#######

# checkout and reset is to bring older version of code
existing file before getting staged and commit
> git checkout file_name    = delete code

getting staged but not commit
> git reset file_name       = remove staged from file

after getting staged and commit
> git checkout commit_code   = keep log, delete code
   -- file_name
  or
  > git checkout HEAD~3 file_name
> git revert commit_code -n  = keep log, delete code in all file
> git reset --mixed commit   = delete log, keep code
  _code
> git reset --hard commit_   = delete log, delete code
  code

# rm to removed files in git
> git rm file_name.extension = delete file
> git rm --cached file_name. = keep file, delete from tracked git
  extension
> git rm -r --cached folder_ = keep folder, delete from tracked git
  name/


        #######===========#######
        ###==== Catatan 4 ====###
        # branch, conflict, .gitignore
        #######===========#######

# branch
branch is to make update without changing main branch
> git branch               = check branch list
  or
  git branch -a		   = check all branch in local and remote
> git branch (branch_name) = make a new branch
> git checkout (branch_    = move branch
  name)
> git brach -D (branch_    = delete branch
  name)
> git branch -M new_branch = change used branch name 
  _name
> git branch -m (old_      = change branch name
  branch_name) (new_branch
  _name)

merge new branch have move to master branch first
> git merge (branch_name)  = merge 'new branch' into 'branch master'

# conflict
when conflict happen in branch master after merge with another branch,
update in master and commit.

# .gitignore
make file undetectable from git
> touch .gitignore		= make .gitignore file
  add to .gitignore
  > file_name.extension		= ignore file
  > folder_name/		= ignore folder
  > *.extension			= all file with that extension